/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Shares } from "./Shares";
import { SharesCountArgs } from "./SharesCountArgs";
import { SharesFindManyArgs } from "./SharesFindManyArgs";
import { SharesFindUniqueArgs } from "./SharesFindUniqueArgs";
import { CreateSharesArgs } from "./CreateSharesArgs";
import { UpdateSharesArgs } from "./UpdateSharesArgs";
import { DeleteSharesArgs } from "./DeleteSharesArgs";
import { SharesService } from "../shares.service";
@graphql.Resolver(() => Shares)
export class SharesResolverBase {
  constructor(protected readonly service: SharesService) {}

  async _sharesItemsMeta(
    @graphql.Args() args: SharesCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Shares])
  async sharesItems(
    @graphql.Args() args: SharesFindManyArgs
  ): Promise<Shares[]> {
    return this.service.sharesItems(args);
  }

  @graphql.Query(() => Shares, { nullable: true })
  async shares(
    @graphql.Args() args: SharesFindUniqueArgs
  ): Promise<Shares | null> {
    const result = await this.service.shares(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Shares)
  async createShares(@graphql.Args() args: CreateSharesArgs): Promise<Shares> {
    return await this.service.createShares({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Shares)
  async updateShares(
    @graphql.Args() args: UpdateSharesArgs
  ): Promise<Shares | null> {
    try {
      return await this.service.updateShares({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Shares)
  async deleteShares(
    @graphql.Args() args: DeleteSharesArgs
  ): Promise<Shares | null> {
    try {
      return await this.service.deleteShares(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
