/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PostViewCount } from "./PostViewCount";
import { PostViewCountCountArgs } from "./PostViewCountCountArgs";
import { PostViewCountFindManyArgs } from "./PostViewCountFindManyArgs";
import { PostViewCountFindUniqueArgs } from "./PostViewCountFindUniqueArgs";
import { CreatePostViewCountArgs } from "./CreatePostViewCountArgs";
import { UpdatePostViewCountArgs } from "./UpdatePostViewCountArgs";
import { DeletePostViewCountArgs } from "./DeletePostViewCountArgs";
import { PostViewCountService } from "../postViewCount.service";
@graphql.Resolver(() => PostViewCount)
export class PostViewCountResolverBase {
  constructor(protected readonly service: PostViewCountService) {}

  async _postViewCountsMeta(
    @graphql.Args() args: PostViewCountCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PostViewCount])
  async postViewCounts(
    @graphql.Args() args: PostViewCountFindManyArgs
  ): Promise<PostViewCount[]> {
    return this.service.postViewCounts(args);
  }

  @graphql.Query(() => PostViewCount, { nullable: true })
  async postViewCount(
    @graphql.Args() args: PostViewCountFindUniqueArgs
  ): Promise<PostViewCount | null> {
    const result = await this.service.postViewCount(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PostViewCount)
  async createPostViewCount(
    @graphql.Args() args: CreatePostViewCountArgs
  ): Promise<PostViewCount> {
    return await this.service.createPostViewCount({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PostViewCount)
  async updatePostViewCount(
    @graphql.Args() args: UpdatePostViewCountArgs
  ): Promise<PostViewCount | null> {
    try {
      return await this.service.updatePostViewCount({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PostViewCount)
  async deletePostViewCount(
    @graphql.Args() args: DeletePostViewCountArgs
  ): Promise<PostViewCount | null> {
    try {
      return await this.service.deletePostViewCount(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
