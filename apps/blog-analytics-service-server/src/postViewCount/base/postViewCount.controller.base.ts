/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PostViewCountService } from "../postViewCount.service";
import { PostViewCountCreateInput } from "./PostViewCountCreateInput";
import { PostViewCount } from "./PostViewCount";
import { PostViewCountFindManyArgs } from "./PostViewCountFindManyArgs";
import { PostViewCountWhereUniqueInput } from "./PostViewCountWhereUniqueInput";
import { PostViewCountUpdateInput } from "./PostViewCountUpdateInput";

export class PostViewCountControllerBase {
  constructor(protected readonly service: PostViewCountService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PostViewCount })
  async createPostViewCount(
    @common.Body() data: PostViewCountCreateInput
  ): Promise<PostViewCount> {
    return await this.service.createPostViewCount({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        views: true,
        postId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PostViewCount] })
  @ApiNestedQuery(PostViewCountFindManyArgs)
  async postViewCounts(
    @common.Req() request: Request
  ): Promise<PostViewCount[]> {
    const args = plainToClass(PostViewCountFindManyArgs, request.query);
    return this.service.postViewCounts({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        views: true,
        postId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PostViewCount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async postViewCount(
    @common.Param() params: PostViewCountWhereUniqueInput
  ): Promise<PostViewCount | null> {
    const result = await this.service.postViewCount({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        views: true,
        postId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PostViewCount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePostViewCount(
    @common.Param() params: PostViewCountWhereUniqueInput,
    @common.Body() data: PostViewCountUpdateInput
  ): Promise<PostViewCount | null> {
    try {
      return await this.service.updatePostViewCount({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          views: true,
          postId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PostViewCount })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePostViewCount(
    @common.Param() params: PostViewCountWhereUniqueInput
  ): Promise<PostViewCount | null> {
    try {
      return await this.service.deletePostViewCount({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          views: true,
          postId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
