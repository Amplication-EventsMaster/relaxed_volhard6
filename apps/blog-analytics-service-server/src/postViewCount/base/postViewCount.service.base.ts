/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PostViewCount as PrismaPostViewCount } from "@prisma/client";

export class PostViewCountServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PostViewCountCountArgs, "select">
  ): Promise<number> {
    return this.prisma.postViewCount.count(args);
  }

  async postViewCounts(
    args: Prisma.PostViewCountFindManyArgs
  ): Promise<PrismaPostViewCount[]> {
    return this.prisma.postViewCount.findMany(args);
  }
  async postViewCount(
    args: Prisma.PostViewCountFindUniqueArgs
  ): Promise<PrismaPostViewCount | null> {
    return this.prisma.postViewCount.findUnique(args);
  }
  async createPostViewCount(
    args: Prisma.PostViewCountCreateArgs
  ): Promise<PrismaPostViewCount> {
    return this.prisma.postViewCount.create(args);
  }
  async updatePostViewCount(
    args: Prisma.PostViewCountUpdateArgs
  ): Promise<PrismaPostViewCount> {
    return this.prisma.postViewCount.update(args);
  }
  async deletePostViewCount(
    args: Prisma.PostViewCountDeleteArgs
  ): Promise<PrismaPostViewCount> {
    return this.prisma.postViewCount.delete(args);
  }
}
