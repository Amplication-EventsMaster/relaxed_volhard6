/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Fdsf as PrismaFdsf } from "@prisma/client";

export class FdsfServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FdsfCountArgs, "select">): Promise<number> {
    return this.prisma.fdsf.count(args);
  }

  async fdsfs(args: Prisma.FdsfFindManyArgs): Promise<PrismaFdsf[]> {
    return this.prisma.fdsf.findMany(args);
  }
  async fdsf(args: Prisma.FdsfFindUniqueArgs): Promise<PrismaFdsf | null> {
    return this.prisma.fdsf.findUnique(args);
  }
  async createFdsf(args: Prisma.FdsfCreateArgs): Promise<PrismaFdsf> {
    return this.prisma.fdsf.create(args);
  }
  async updateFdsf(args: Prisma.FdsfUpdateArgs): Promise<PrismaFdsf> {
    return this.prisma.fdsf.update(args);
  }
  async deleteFdsf(args: Prisma.FdsfDeleteArgs): Promise<PrismaFdsf> {
    return this.prisma.fdsf.delete(args);
  }
}
